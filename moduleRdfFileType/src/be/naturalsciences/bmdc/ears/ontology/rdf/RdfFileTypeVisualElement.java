/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package be.naturalsciences.bmdc.ears.ontology.rdf;

import be.naturalsciences.bmdc.ears.ontology.OntologyModel;
import be.naturalsciences.bmdc.ears.ontology.OntologyNodes;
import be.naturalsciences.bmdc.ears.ontology.gui.AsConceptNode;
import be.naturalsciences.bmdc.ears.ontology.gui.NodeDonor;
import be.naturalsciences.bmdc.ears.ontology.gui.NodeReceiver;
import java.awt.event.ActionEvent;
import java.io.FileNotFoundException;
import java.io.IOException;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JToolBar;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.netbeans.core.spi.multiview.MultiViewFactory;
import org.openide.awt.UndoRedo;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.CloneableTopComponent;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(
        displayName = "#LBL_RdfFileType2_VISUAL",
        iconBase = "be/naturalsciences/bmdc/ears/ontology/rdf/rdf-16.png",
        mimeType = "application/rdf+xml",
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = RdfFileTypeVisualElement.TCNAME,
        position = 2000
)
@Messages("LBL_RdfFileType2_VISUAL=Visual")
public final class RdfFileTypeVisualElement extends CloneableTopComponent implements MultiViewElement, ExplorerManager.Provider, ChangeListener, NodeReceiver, NodeDonor/*, PropertyChangeListener, NodeListener*/ {

    public static final String TCNAME = "RdfFileTypeVisualElement";

    private final RdfFileTypeDataObject obj;
    private final JToolBar toolbar = new JToolBar();
    private transient MultiViewElementCallback callback;

    private final ExplorerManager mgr = new ExplorerManager();
    private InstanceContent ic = new InstanceContent();

    //private JLabel label;
    private Lookup lookup;

    private RdfVisualElementPanel panel;
    

    public RdfFileTypeVisualElement(Lookup lkp) throws Exception /*throws FileNotFoundException, IOException*/ {
        this.obj = lkp.lookup(RdfFileTypeDataObject.class);
        //this.obj =obj;
        assert this.obj != null;
        //this.obj.addChangeListener(this);
        try {
            initComponents();
            AsConceptNode.ContextBehaviour beh = AsConceptNode.EDIT_BEHAVIOUR;
            beh.nListener = obj;
            beh.pcListener = obj;
            panel = new RdfVisualElementPanel(obj, beh);

            this.obj.addChangeListener(panel);

            lookup = new ProxyLookup(obj.getLookup(), Lookups.fixed(/*new AbstractLookup(ic),*/ExplorerUtils.createLookup(mgr, this.getActionMap())));
            associateLookup(lookup);
        } catch (Exception e) {
            this.close();
            RdfFileTypeDataObject.nbFilesOpen = 0;
            throw e;
        }
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return mgr;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public JComponent getVisualRepresentation() {
        //return new RdfVisualElementPanel(obj);
        return panel;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {
        return new ProxyLookup(panel.getLookup(), lookup);
    }

    @Override
    public void componentOpened() {
        //obj.addPropertyChangeListener(this);
    }

    @Override
    public void componentClosed() {
        this.obj.close();
        this.obj.getOntModel().close(OntologyModel.ActionEnum.EDITING);
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        RdfFileTypeDataObject.RdfFileTypeDataObjectSavable savable = obj.getLookup().lookup(RdfFileTypeDataObject.RdfFileTypeDataObjectSavable.class);
        if (savable != null) {

            /*DialogDescriptor ddesc = new DialogDescriptor("Save Changes to ?" + obj.getName(),
             "Close " + obj.getName(),
             true,
             DialogDescriptor.YES_NO_OPTION,
             DialogDescriptor.CANCEL_OPTION,
             new ActionListener() {
             public void actionPerformed(ActionEvent e) {
             if (e.getActionCommand().equalsIgnoreCase("yes")) {
             try {
             savable.handleSave();
             } catch (IOException ex) {
             Exceptions.printStackTrace(ex);
             }
             } else {
             }
             }
             });

             DialogDisplayer.getDefault().createDialog(ddesc).setVisible(true);*/
            /*Confirmation message = new NotifyDescriptor.Confirmation("Do you want to save \""
             + obj.getName() + ")\"?",
             NotifyDescriptor.YES_NO_OPTION,
             NotifyDescriptor.QUESTION_MESSAGE);
             Object result = DialogDisplayer.getDefault().notify(message);
             if (NotifyDescriptor.YES_OPTION.equals(result)) {

             try {
             savable.handleSave();
             } catch (IOException ex) {
             Exceptions.printStackTrace(ex);
             }
             } else if (NotifyDescriptor.CANCEL_OPTION.equals(result)) {
             return MultiViewFactory.createUnsafeCloseState("Just click cancel", MultiViewFactory.NOOP_CLOSE_ACTION, MultiViewFactory.NOOP_CLOSE_ACTION);
             }*/
            return MultiViewFactory.createUnsafeCloseState("Do you want to save \""
                    + obj.getName() + ")\"?", new AbstractAction() {

                        @Override
                        public void actionPerformed(ActionEvent ae) {
                            try {
                                savable.handleSave();
                            } catch (IOException ex) {
                                Exceptions.printStackTrace(ex);
                            }
                        }
                    }, MultiViewFactory.NOOP_CLOSE_ACTION);
        }
        return CloseOperationState.STATE_OK;
    }

    /**
     * *
     * When the file is saved, all nodes need to be recalculated.
     *
     * @param ce
     */
    @Override
    public void stateChanged(ChangeEvent ce) {
        try {
            obj.getOntModel().open(OntologyNodes.DEFAULT_ORDER, OntologyModel.ActionEnum.EDITING);
        } catch (FileNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

}
