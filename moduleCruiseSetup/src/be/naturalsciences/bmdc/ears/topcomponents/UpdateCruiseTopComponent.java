/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package be.naturalsciences.bmdc.ears.topcomponents;

import be.naturalsciences.bmdc.ears.entities.CruiseBean;
import static be.naturalsciences.bmdc.ears.entities.CruiseBean.DAY_FORMAT;
import be.naturalsciences.bmdc.ears.entities.CurrentVessel;
import be.naturalsciences.bmdc.ears.entities.IVessel;
import be.naturalsciences.bmdc.ears.netbeans.services.SingletonResult;
import be.naturalsciences.bmdc.ears.rest.RestClientCruise;
import be.naturalsciences.bmdc.ears.utils.Messaging;
import be.naturalsciences.bmdc.ontology.EarsException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.ConnectException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JSeparator;
import javax.swing.ListSelectionModel;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableRowSorter;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.InputOutput;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//be.ac.mumm//UpdateCruise//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "UpdateCruiseTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "Window", id = "be.naturalsciences.bmdc.ears.topcomponents.UpdateCruiseTopComponent")
@ActionReferences({
    // @ActionReference(path = "Toolbars/Window", position = 3333,name = "Edit cruise"),
    @ActionReference(path = "Menu/Window/Cruise & program setup", position = 3)
})
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_UpdateCruiseAction",
        preferredID = "UpdateCruiseTopComponent"
)
@Messages({
    "CTL_UpdateCruiseAction=Edit cruise...",
    "CTL_UpdateCruiseTopComponent=Search for cruises",
    "HINT_UpdateCruiseTopComponent=Search for cruises"
})
public final class UpdateCruiseTopComponent extends TopComponent implements LookupListener {

    CruiseTableModel model;

    private InputOutput io;

    //public Object[][] dataFormWS;
    private static UpdateCruiseTopComponent instance;

    //private CurrentVessel currentVessel;
    private SingletonResult<CurrentVessel, IVessel> currentVesselResult;

    Lookup.Result<IVessel> vesselResult;

    RestClientCruise restClientCruise;

    public UpdateCruiseTopComponent() {

        initComponents();
        try {
            restClientCruise = new RestClientCruise();
        } catch (ConnectException ex) {
            Messaging.report("Note that the webservices are offline. The cruises can't be retrieved.", ex, this.getClass(), true);
        } catch (EarsException ex) {
            Messaging.report(ex.getMessage(), ex, this.getClass(), true);
        }
        setName(Bundle.CTL_UpdateCruiseTopComponent());
        setToolTipText(Bundle.HINT_UpdateCruiseTopComponent());
        instance = this;

        currentVesselResult = new SingletonResult(CurrentVessel.class, this);

        /*vesselResult = this.getLookup().lookupResult(IVessel.class);
        vesselResult.addLookupListener(this);*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        o_refreshList = new javax.swing.JButton();
        o_edit = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        cruiseNameTextField = new be.naturalsciences.bmdc.ears.topcomponents.SearchTextField();
        piTextField = new be.naturalsciences.bmdc.ears.topcomponents.SearchTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        o_cruiseJtable = new javax.swing.JTable();

        org.openide.awt.Mnemonics.setLocalizedText(o_refreshList, org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.o_refreshList.text")); // NOI18N
        o_refreshList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                o_refreshListActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(o_edit, org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.o_edit.text")); // NOI18N
        o_edit.setActionCommand(org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.o_edit.actionCommand")); // NOI18N
        o_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                o_editActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.jPanel2.border.title"))); // NOI18N

        cruiseNameTextField.setText(org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.cruiseNameTextField.text")); // NOI18N
        cruiseNameTextField.setToolTipText(org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.cruiseNameTextField.toolTipText")); // NOI18N
        cruiseNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cruiseNameTextFieldActionPerformed(evt);
            }
        });

        piTextField.setText(org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.piTextField.text")); // NOI18N
        piTextField.setToolTipText(org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.piTextField.toolTipText")); // NOI18N
        piTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                piTextFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(piTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cruiseNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cruiseNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(piTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(0, 34, Short.MAX_VALUE))
        );

        jScrollPane3.setOpaque(false);
        jScrollPane3.setPreferredSize(new java.awt.Dimension(454, 500));

        o_cruiseJtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        o_cruiseJtable.setRowHeight(20);
        jScrollPane2.setViewportView(o_cruiseJtable);

        jScrollPane3.setViewportView(jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(o_refreshList, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(o_edit))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(o_refreshList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(o_edit)
                .addGap(14, 14, 14)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87))
        );

        jPanel2.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.jPanel2.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void o_refreshListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_o_refreshListActionPerformed
        if (currentVesselResult.getCurrent() != null) {
            model.refreshModel(restClientCruise.getCruiseByPlatform(currentVesselResult.getCurrent().getConcept()));
            o_cruiseJtable.repaint();
        }
    }//GEN-LAST:event_o_refreshListActionPerformed

    private void o_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_o_editActionPerformed
        editCruise();

        /*if (EditCruiseSetupTopComponent.getInstance() instanceof EditCruiseSetupTopComponent) {//ys01
         EditCruiseSetupTopComponent currentCruiseTopComponent = EditCruiseSetupTopComponent.getInstance();//ys01
         currentCruiseTopComponent.close();//ys01
         }
         if (o_cruiseJtable.getSelectedRowCount() == 1) {
         CruiseBean currentlyEditedCruise = model.getCruise(o_cruiseJtable.getSelectedRow());

         EditCruiseSetupTopComponent editCruise = new EditCruiseSetupTopComponent();
         editCruise.open();
         editCruise.componentShowing();
         editCruise.setDisplayName("Editing " + currentlyEditedCruise.getCruiseName());
         }*/

    }//GEN-LAST:event_o_editActionPerformed

    private void cruiseNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cruiseNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cruiseNameTextFieldActionPerformed

    private void piTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_piTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_piTextFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private be.naturalsciences.bmdc.ears.topcomponents.SearchTextField cruiseNameTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable o_cruiseJtable;
    private javax.swing.JButton o_edit;
    private javax.swing.JButton o_refreshList;
    private be.naturalsciences.bmdc.ears.topcomponents.SearchTextField piTextField;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening

        /*if (UpdateProgramTopComponent.getInstance() instanceof UpdateProgramTopComponent) {
         UpdateProgramTopComponent currentUpdateProgramTopComponent = UpdateProgramTopComponent.getInstance();
         currentUpdateProgramTopComponent.close();//ys01
         }*/

 /*if (EditProgramSetupTopComponent.getInstance() instanceof EditProgramSetupTopComponent) {
         EditProgramSetupTopComponent currentEditProgramSetupTopComponent = EditProgramSetupTopComponent.getInstance();
         currentEditProgramSetupTopComponent.close();//ys01
         }*/
        //Create a table with a sorter.
        if (currentVesselResult.getCurrent() != null && restClientCruise != null) {
            model = new CruiseTableModel(restClientCruise.getCruiseByPlatform(currentVesselResult.getCurrent().getConcept()));
        }
        if (model != null) {
            TableRowSorter<CruiseTableModel> sorter = new TableRowSorter<>(model);

            o_cruiseJtable.setModel(model);
            o_cruiseJtable.setRowSorter(sorter);
            o_cruiseJtable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            o_cruiseJtable.setRowSelectionAllowed(true);
            o_cruiseJtable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

            final JPopupMenu popupMenu = new JPopupMenu();
            JMenuItem editItem = new JMenuItem("Edit");
            JSeparator sep = new JSeparator();

            JMenuItem deleteItem = new JMenuItem("Delete");
            editItem.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent ae) {
                    editCruise();
                }
            });
            deleteItem.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {

                    NotifyDescriptor.Confirmation confirm = new NotifyDescriptor.Confirmation("Do you want to delete this cruise? This operation cannot be undone.",
                            "Delete cruise",
                            NotifyDescriptor.YES_NO_OPTION);

                    Object result = DialogDisplayer.getDefault().notify(confirm);
                    if (result != NotifyDescriptor.YES_OPTION) {
                        return;
                    }
                    //JOptionPane.showMessageDialog(UpdateCruiseTopComponent.this, "Right-click performed on table and choose DELETE");
                    CruiseBean cruise = model.getCruise(o_cruiseJtable.getSelectedRow());
                    TopComponent tc = findTopComponent(cruise);
                    if (tc != null) {
                        tc.close();
                    }
                    removeCruise(cruise); //remove from ws
                }
            });
            popupMenu.add(editItem);
            popupMenu.add(sep);
            popupMenu.add(deleteItem);
            o_cruiseJtable.setComponentPopupMenu(popupMenu);

            SearchCruiseByName byName = new SearchCruiseByName(cruiseNameTextField, model, o_cruiseJtable, sorter);
            cruiseNameTextField.accept(byName);
            SearchCruiseByPrincipalInvestigator bypI = new SearchCruiseByPrincipalInvestigator(piTextField, model, o_cruiseJtable, sorter);
            cruiseNameTextField.accept(bypI);
        }
    }

    @Override
    public void componentClosed() {
        instance = null;
    }

    void writeProperties(java.util.Properties p) {
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }

    private void editCruise() {
        if (o_cruiseJtable.getSelectedRowCount() == 1) {
            CruiseBean currentlyEditedCruise = model.getCruise(o_cruiseJtable.getSelectedRow());

            TopComponent tc = findTopComponent(currentlyEditedCruise);
            if (tc == null) {
                tc = new EditCruiseSetupTopComponent(currentlyEditedCruise);
                tc.open();
            }
            tc.requestActive();
            tc.setDisplayName("Editing " + currentlyEditedCruise.getCruiseName());
        }
    }

    private TopComponent findTopComponent(CruiseBean cruise) {
        Set<TopComponent> openTopComponents = WindowManager.getDefault().getRegistry().getOpened();
        for (TopComponent tc : openTopComponents) {
            if (tc.getLookup().lookup(CruiseBean.class) == cruise) {
                return tc;
            }
        }
        return null;
    }

    private void removeCruise(CruiseBean cruise) {
        restClientCruise.removeCruise(cruise);
        CurrentVessel currentVessel = currentVesselResult.getCurrent();
        if (currentVessel != null) {
            model.refreshModel(restClientCruise.getCruiseByPlatform(currentVessel.getConcept()));
            o_cruiseJtable.repaint();
        }
    }

    /*private void filter(String in_filter) {
     TableRowSorter<CruiseTableModel> tr = new TableRowSorter<>(model);
     o_cruiseJtable.setRowSorter(tr);
     tr.setRowFilter(RowFilter.regexFilter(in_filter));
     }*/
    @Override
    public void resultChanged(LookupEvent le) {
        le.getSource();
        if (currentVesselResult.getCurrent() != null && restClientCruise != null) {
            model.refreshModel(restClientCruise.getCruiseByPlatform(currentVesselResult.getCurrent().getConcept()));
            model.fireTableDataChanged();
            o_cruiseJtable.repaint();
        }
    }

    public class CruiseTableModel extends AbstractTableModel implements FilterableTableModel {

        public final static String NAME = "Cruise name (code)";
        public final static String START_DATE = "Start date";
        public final static String END_DATE = "End date";
        public final static String CHIEF_SCIENTIST = "Chief scientist";
        private final String[] columnNames = {NAME,
            START_DATE, END_DATE, CHIEF_SCIENTIST};
        private List<CruiseBean> data;

        public CruiseTableModel(Collection<CruiseBean> cruises) {
            data = new ArrayList();
            addCruiseList(cruises);
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public int getRowCount() {
            return data.size();
        }

        @Override
        public String getColumnName(int col) {
            return columnNames[col];
        }

        @Override
        public int findColumn(String name) {
            for (int i = 0; i < columnNames.length; i++) {
                if (columnNames[i].equals(name)) {
                    return i;
                }
            }
            return -1;
        }

        public List<Integer> getRowsByQueryAndColumn(String searchBy, String column) {
            List<Integer> result = new ArrayList<>();
            for (int i = 0; i < data.size(); i++) {
                String name = (String) getValueAt(i, findColumn(column));
                if (name.contains(searchBy)) {
                    result.add(i);
                }
            }
            return result;
        }

        @Override
        public Object getValueAt(int row, int column) {
            CruiseBean cruise = data.get(row);
            switch ((getColumnName(column))) {
                case NAME:
                    return cruise.getCruiseName();
                case START_DATE:
                    return DAY_FORMAT.format(cruise.getdStartDate());
                case END_DATE:
                    return DAY_FORMAT.format(cruise.getdEndDate());
                case CHIEF_SCIENTIST:
                    return cruise.getNiceChiefScientistString();
                default:
                    return null;
            }
        }

        /*
         * JTable uses this method to determine the default renderer/
         * editor for each cell.  If we didn't implement this method,
         * then the last column would contain text ("true"/"false"),
         * rather than a check box.
         */
        @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        /*
         * Don't need to implement this method unless your table's
         * editable.
         */
        @Override
        public boolean isCellEditable(int row, int col) {
            return false;
        }

        /*
         * Don't need to implement this method unless your table's
         * data can change.
         */
        @Override
        public void setValueAt(Object value, int row, int col) {
            //dummy method. Nothing will be added to this table anyway
        }

        public CruiseBean getCruise(int row) {
            return data.get(row);
        }

        public void addCruise(CruiseBean cruise) {

            data.add(cruise);
        }

        public void addCruiseList(Collection<CruiseBean> cruises) {
            for (CruiseBean cruise : cruises) {
                addCruise(cruise);
            }
        }

        public void removeCruiseFromVisualRepresentation(int row) {
            data.remove(row);
        }

        public void clearAllCruises() {
            data.retainAll(new ArrayList());
        }

        public void refreshModel(Collection<CruiseBean> cruises) {
            model.clearAllCruises();
            model.addCruiseList(cruises);
        }
    }

    public static UpdateCruiseTopComponent getInstance() { //ys01
        return instance;
    }

}
