/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package be.naturalsciences.bmdc.ears.topcomponents;

import be.naturalsciences.bmdc.ears.topcomponents.tablemodel.CruiseTableModel;
import be.naturalsciences.bmdc.ears.topcomponents.tablemodel.FilterableTableModel;
import be.naturalsciences.bmdc.ears.entities.CruiseBean;
import static be.naturalsciences.bmdc.ears.entities.CruiseBean.DAY_FORMAT;
import be.naturalsciences.bmdc.ears.entities.CurrentVessel;
import be.naturalsciences.bmdc.ears.entities.IResponseMessage;
import be.naturalsciences.bmdc.ears.entities.IVessel;
import be.naturalsciences.bmdc.ears.netbeans.services.GlobalActionContextProxy;
import be.naturalsciences.bmdc.ears.netbeans.services.SingletonResult;
import be.naturalsciences.bmdc.ears.rest.RestClientCruise;
import be.naturalsciences.bmdc.ears.utils.Messaging;
import be.naturalsciences.bmdc.ontology.EarsException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.ConnectException;
import java.util.Set;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JSeparator;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableRowSorter;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.InputOutput;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//be.ac.mumm//UpdateCruise//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "UpdateCruiseTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "Window", id = "be.naturalsciences.bmdc.ears.topcomponents.UpdateCruiseTopComponent")
@ActionReferences({
    // @ActionReference(path = "Toolbars/Window", position = 3333,name = "Edit cruise"),
    @ActionReference(path = "Menu/Window/Cruise & program setup", position = 3)
})
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_UpdateCruiseAction",
        preferredID = "UpdateCruiseTopComponent"
)
@Messages({
    "CTL_UpdateCruiseAction=Edit cruise...",
    "CTL_UpdateCruiseTopComponent=Search for cruises",
    "HINT_UpdateCruiseTopComponent=Search for cruises"
})
public final class UpdateCruiseTopComponent extends TopComponent implements LookupListener {

    CruiseTableModel model;

    private InputOutput io;

    //public Object[][] dataFormWS;
    private static UpdateCruiseTopComponent instance;

    //private CurrentVessel currentVessel;
    private SingletonResult<CurrentVessel, IVessel> currentVesselResult;

    Lookup.Result<IVessel> vesselResult;

    RestClientCruise restClientCruise;

    public UpdateCruiseTopComponent() {

        initComponents();
        try {
            restClientCruise = new RestClientCruise();
        } catch (ConnectException ex) {
            Messaging.report("There is a problem reaching the webservices.", ex, this.getClass(), true);
        } catch (EarsException ex) {
            Messaging.report("There is a problem reaching the webservices.", ex, this.getClass(), true);
        }
        setName(Bundle.CTL_UpdateCruiseTopComponent());
        setToolTipText(Bundle.HINT_UpdateCruiseTopComponent());
        instance = this;

        currentVesselResult = new SingletonResult(CurrentVessel.class, this);

        /*vesselResult = this.getLookup().lookupResult(IVessel.class);
        vesselResult.addLookupListener(this);*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        o_refreshList = new javax.swing.JButton();
        o_edit = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        cruiseNameTextField = new be.naturalsciences.bmdc.ears.topcomponents.SearchTextField();
        piTextField = new be.naturalsciences.bmdc.ears.topcomponents.SearchTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        o_cruiseJtable = new javax.swing.JTable();

        org.openide.awt.Mnemonics.setLocalizedText(o_refreshList, org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.o_refreshList.text")); // NOI18N
        o_refreshList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                o_refreshListActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(o_edit, org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.o_edit.text")); // NOI18N
        o_edit.setActionCommand(org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.o_edit.actionCommand")); // NOI18N
        o_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                o_editActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.jPanel2.border.title"))); // NOI18N

        cruiseNameTextField.setText(org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.cruiseNameTextField.text")); // NOI18N
        cruiseNameTextField.setToolTipText(org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.cruiseNameTextField.toolTipText")); // NOI18N
        cruiseNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cruiseNameTextFieldActionPerformed(evt);
            }
        });

        piTextField.setText(org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.piTextField.text")); // NOI18N
        piTextField.setToolTipText(org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.piTextField.toolTipText")); // NOI18N
        piTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                piTextFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(piTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cruiseNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cruiseNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(piTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(0, 34, Short.MAX_VALUE))
        );

        o_cruiseJtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        o_cruiseJtable.setRowHeight(20);
        jScrollPane2.setViewportView(o_cruiseJtable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(o_refreshList, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(o_edit))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(o_refreshList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(o_edit)
                .addGap(14, 14, 14)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87))
        );

        jPanel2.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(UpdateCruiseTopComponent.class, "UpdateCruiseTopComponent.jPanel2.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void o_refreshListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_o_refreshListActionPerformed
        if (currentVesselResult.getCurrent() != null) {
            try {
                model.refreshModel(restClientCruise.getCruiseByPlatform(currentVesselResult.getCurrent().getConcept()));
            } catch (ConnectException ex) {
                Messaging.report("There is a problem reaching the webservices.", ex, this.getClass(), true);
            }
            o_cruiseJtable.repaint();
        }
    }//GEN-LAST:event_o_refreshListActionPerformed

    private void o_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_o_editActionPerformed
        editCruise();
    }//GEN-LAST:event_o_editActionPerformed

    private void cruiseNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cruiseNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cruiseNameTextFieldActionPerformed

    private void piTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_piTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_piTextFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private be.naturalsciences.bmdc.ears.topcomponents.SearchTextField cruiseNameTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable o_cruiseJtable;
    private javax.swing.JButton o_edit;
    private javax.swing.JButton o_refreshList;
    private be.naturalsciences.bmdc.ears.topcomponents.SearchTextField piTextField;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening

        /*if (UpdateProgramTopComponent.getInstance() instanceof UpdateProgramTopComponent) {
         UpdateProgramTopComponent currentUpdateProgramTopComponent = UpdateProgramTopComponent.getInstance();
         currentUpdateProgramTopComponent.close();//ys01
         }*/

 /*if (EditProgramSetupTopComponent.getInstance() instanceof EditProgramSetupTopComponent) {
         EditProgramSetupTopComponent currentEditProgramSetupTopComponent = EditProgramSetupTopComponent.getInstance();
         currentEditProgramSetupTopComponent.close();//ys01
         }*/
        //Create a table with a sorter.
        if (currentVesselResult.getCurrent() != null && restClientCruise != null) {
            try {
                model = new CruiseTableModel(restClientCruise.getCruiseByPlatform(currentVesselResult.getCurrent().getConcept()), this);
            } catch (ConnectException ex) {
                Messaging.report("The webservices are offline. The list of cruises can't be updated.", ex, this.getClass(), true);
            }
        }
        if (model != null) {
            TableRowSorter<CruiseTableModel> sorter = new TableRowSorter<>(model);

            o_cruiseJtable.setModel(model);
            o_cruiseJtable.setRowSorter(sorter);
            o_cruiseJtable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            o_cruiseJtable.setRowSelectionAllowed(true);
            o_cruiseJtable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

            final JPopupMenu popupMenu = new JPopupMenu();
            JMenuItem editItem = new JMenuItem("Edit");
            JSeparator sep = new JSeparator();

            JMenuItem deleteItem = new JMenuItem("Delete");
            editItem.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent ae) {
                    editCruise();
                }
            });

            deleteItem.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {

                    NotifyDescriptor.Confirmation confirm = new NotifyDescriptor.Confirmation("Do you want to delete this cruise? This operation cannot be undone.",
                            "Delete cruise",
                            NotifyDescriptor.YES_NO_OPTION);

                    Object result = DialogDisplayer.getDefault().notify(confirm);
                    if (result != NotifyDescriptor.YES_OPTION) {
                        return;
                    }
                    //JOptionPane.showMessageDialog(UpdateCruiseTopComponent.this, "Right-click performed on table and choose DELETE");
                    int row = o_cruiseJtable.convertRowIndexToModel(o_cruiseJtable.getSelectedRow());
                    //int row = o_cruiseJtable.convertRowIndexToModel(o_cruiseJtable.getEditingRow());

                    CruiseBean cruise = model.getCruise(row);
                    TopComponent tc = findTopComponent(cruise);
                    if (tc != null) {
                        tc.close();
                    }
                    removeCruise(cruise); //remove from ws
                }
            });
            popupMenu.add(editItem);
            popupMenu.add(sep);
            popupMenu.add(deleteItem);
            o_cruiseJtable.setComponentPopupMenu(popupMenu);

            SearchCruiseByName byName = new SearchCruiseByName(cruiseNameTextField, model, o_cruiseJtable, sorter);
            cruiseNameTextField.accept(byName);
            SearchCruiseByPrincipalInvestigator bypI = new SearchCruiseByPrincipalInvestigator(piTextField, model, o_cruiseJtable, sorter);
            cruiseNameTextField.accept(bypI);
        }
    }

    @Override
    public void componentClosed() {
        instance = null;
    }

    void writeProperties(java.util.Properties p) {
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }

    private void editCruise() {
        if (o_cruiseJtable.getSelectedRowCount() == 1) {
            int row = o_cruiseJtable.convertRowIndexToModel(o_cruiseJtable.getSelectedRow());
            CruiseBean currentlyEditedCruise = model.getCruise(row);

            TopComponent tc = findTopComponent(currentlyEditedCruise);
            if (tc == null) {
                tc = new EditCruiseSetupTopComponent(currentlyEditedCruise);
                tc.open();
            }
            tc.requestActive();
            tc.setDisplayName("Editing " + currentlyEditedCruise.getName());
        }
    }

    private TopComponent findTopComponent(CruiseBean cruise) {
        Set<TopComponent> openTopComponents = WindowManager.getDefault().getRegistry().getOpened();
        for (TopComponent tc : openTopComponents) {
            if (tc.getLookup().lookup(CruiseBean.class) == cruise) {
                return tc;
            }
        }
        return null;
    }

    private void removeCruise(CruiseBean cruise) {
        IResponseMessage removeCruiseMessage = restClientCruise.removeCruise(cruise);
        if (!removeCruiseMessage.isBad()) {
            CurrentVessel currentVessel = currentVesselResult.getCurrent();
            if (currentVessel != null) {
                try {
                    model.refreshModel(restClientCruise.getCruiseByPlatform(currentVessel.getConcept()));
                } catch (ConnectException ex) {
                    Messaging.report("The webservices are offline. The list of cruises can't be updated.", ex, this.getClass(), true);
                }
                o_cruiseJtable.repaint();
            }
          //  GlobalActionContextProxy.getInstance().add(currentVesselResult.getCurrent()); //causes the vessel to be changed to itself, causing vessel listeners to update their cruise list
        }
    }

    @Override
    public void resultChanged(LookupEvent le) {
        le.getSource();
        /*YS replace by 
        if (currentVesselResult.getCurrent() != null && restClientCruise != null) {
         try {
                model.refreshModel(restClientCruise.getCruiseByPlatform(currentVesselResult.getCurrent().getConcept()));
            } catch (ConnectException ex) {
                Messaging.report("The webservices are offline. The list of cruises can't be updated.", ex, this.getClass(), true);
            }
            model.fireTableDataChanged();
            o_cruiseJtable.repaint();
        }
         */
        if (currentVesselResult.getCurrent() != null) {
            try {
                model.refreshModel(restClientCruise.getCruiseByPlatform(currentVesselResult.getCurrent().getConcept()));
            } catch (ConnectException ex) {
                Messaging.report("The webservices are offline. The list of cruises can't be updated.", ex, this.getClass(), true);
            }
            o_cruiseJtable.repaint();
        }
    }

    public static UpdateCruiseTopComponent getInstance() {
        return instance;
    }

}
