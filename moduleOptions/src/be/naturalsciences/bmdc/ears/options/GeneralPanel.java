/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package be.naturalsciences.bmdc.ears.options;

import be.naturalsciences.bmdc.ears.properties.Configs;
import be.naturalsciences.bmdc.ears.application.Startable;
import be.naturalsciences.bmdc.ears.base.StaticMetadataSearcher;
import be.naturalsciences.bmdc.ears.entities.CurrentURL;
import be.naturalsciences.bmdc.ears.entities.CurrentUser;
import be.naturalsciences.bmdc.ears.entities.CurrentVessel;
import be.naturalsciences.bmdc.ears.entities.HarbourBean;
import be.naturalsciences.bmdc.ears.entities.ICountry;
import be.naturalsciences.bmdc.ears.entities.IVessel;
import be.naturalsciences.bmdc.ears.entities.OrganisationBean;
import be.naturalsciences.bmdc.ears.entities.ProjectBean;
import be.naturalsciences.bmdc.ears.entities.User;
import be.naturalsciences.bmdc.ears.entities.VesselBean;
import be.naturalsciences.bmdc.ears.netbeans.services.GlobalActionContextProxy;
import be.naturalsciences.bmdc.ears.utils.Message;
import be.naturalsciences.bmdc.ears.utils.Messaging;
import be.naturalsciences.bmdc.ontology.EarsException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.text.Position;
import org.netbeans.validation.api.builtin.stringvalidation.StringValidators;
import org.netbeans.validation.api.ui.ValidationGroup;
import org.openide.util.Utilities;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

final class GeneralPanel extends javax.swing.JPanel {

    private final GeneralOptionsPanelController controller;

    protected ValidationGroup group;

    public ValidationGroup getValidationGroup() {
        return group;
    }

    GeneralPanel(GeneralOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        componentOpened();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        platformNameList = new javax.swing.JComboBox();
        platformCodeResult = new javax.swing.JTextField();
        restUrlTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        passwordTextField = new javax.swing.JPasswordField();
        jScrollPane2 = new javax.swing.JScrollPane();
        countryList = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        selectedCountriesLabel = new javax.swing.JLabel();
        refreshMetadataButton = new javax.swing.JButton();
        validationPanel1 = new org.netbeans.validation.api.ui.swing.ValidationPanel();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.jLabel3.text")); // NOI18N

        platformNameList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                platformNameListActionPerformed(evt);
            }
        });

        platformCodeResult.setBackground(new java.awt.Color(240, 240, 240));
        platformCodeResult.setText(org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.platformCodeResult.text")); // NOI18N
        platformCodeResult.setEnabled(false);
        platformCodeResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                platformCodeResultActionPerformed(evt);
            }
        });

        restUrlTextField.setText(org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.restUrlTextField.text")); // NOI18N
        restUrlTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                restUrlTextFieldFocusLost(evt);
            }
        });
        restUrlTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restUrlTextFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.jLabel2.text")); // NOI18N

        userNameTextField.setText(org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.userNameTextField.text")); // NOI18N
        userNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                userNameTextFieldFocusLost(evt);
            }
        });
        userNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameTextFieldActionPerformed(evt);
            }
        });

        passwordTextField.setText(org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.passwordTextField.text")); // NOI18N
        passwordTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordTextFieldFocusLost(evt);
            }
        });
        passwordTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordTextFieldActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(countryList);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(selectedCountriesLabel, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.selectedCountriesLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(refreshMetadataButton, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.refreshMetadataButton.text")); // NOI18N
        refreshMetadataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshMetadataButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(refreshMetadataButton)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(platformNameList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(platformCodeResult, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(restUrlTextField)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(selectedCountriesLabel))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(validationPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(1384, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(validationPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(platformNameList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(platformCodeResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(restUrlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(selectedCountriesLabel))
                .addGap(18, 18, 18)
                .addComponent(refreshMetadataButton)
                .addGap(0, 103, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2183, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 449, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void platformNameListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_platformNameListActionPerformed
        vesselChanged();
    }//GEN-LAST:event_platformNameListActionPerformed

    private void platformCodeResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_platformCodeResultActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_platformCodeResultActionPerformed

    private void restUrlTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_restUrlTextFieldFocusLost
        // TODO add your handling code here:
        
    }//GEN-LAST:event_restUrlTextFieldFocusLost

    private void restUrlTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restUrlTextFieldActionPerformed
        // TODO add your handling code here:
      
    }//GEN-LAST:event_restUrlTextFieldActionPerformed

    private void userNameTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_userNameTextFieldFocusLost
        // TODO add your handling code here:
        
    }//GEN-LAST:event_userNameTextFieldFocusLost

    private void userNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameTextFieldActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_userNameTextFieldActionPerformed

    private void passwordTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordTextFieldFocusLost
        // TODO add your handling code here:
        
    }//GEN-LAST:event_passwordTextFieldFocusLost

    private void passwordTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordTextFieldActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_passwordTextFieldActionPerformed

    private void refreshMetadataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshMetadataButtonActionPerformed
        // TODO add your handling code here:
        saveCountry();
        refreshMetadata();
    }//GEN-LAST:event_refreshMetadataButtonActionPerformed

    void load() {
        // TODO read settings and initialize GUI
        // Example:        
        // someCheckBox.setSelected(Preferences.userNodeForPackage(GeneralPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(GeneralPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
    }

    void store() {
        saveVessel();
        saveRestUrl();
        saveUserNameOrPassword();
        saveCountry();
    }

    public void componentOpened() {
        // TODO add custom code on component opening 

        group = validationPanel1.getValidationGroup();

        AutoCompleteDecorator.decorate(platformNameList);
        platformNameList.addItem("Select vessel name...");
        for (IVessel vessel : StaticMetadataSearcher.getInstance().getVessels(true)) {
            platformNameList.addItem(vessel);
        }

        platformNameList.setEditable(true);

        CurrentVessel currentVessel = Utilities.actionsGlobalContext().lookup(CurrentVessel.class);
        if (currentVessel != null) {
            VesselBean current = currentVessel.getConcept();
            if (current != null) {
                platformNameList.setSelectedItem(current);
                platformCodeResult.setText(current.getCode());
            }
        }

        DefaultListModel<String> countryListModel = new DefaultListModel<>();
        for (ICountry country : StaticMetadataSearcher.getInstance().getCountries(true)) {
            countryListModel.addElement(country.getName());
        }
        countryList.setModel(countryListModel);
        countryList.setSize(200, 200);
        countryList.setVisible(true);
        Set<String> countries = Configs.getCountries();
        int[] items = null;

        if (countries != null && countries.size() > 0) {
            StringBuilder sb = new StringBuilder("<html> <ul>");

            items = new int[countries.size()];
            int i = 0;
            for (String country : countries) {
                sb.append("<li>");
                sb.append(country);
                sb.append("</li>");
                items[i] = countryList.getNextMatch(country, 0, Position.Bias.Forward);
                i++;
            }
            sb.append("</ul><html>");
            selectedCountriesLabel.setText(sb.toString());
            countryList.setSelectedIndices(items);
        } else {
            selectedCountriesLabel.setText("No countries selected.");
        }

        countryList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                countryListChanged();
            }
        });

        platformNameList.setName("Current Research Vessel");
        platformNameList.setToolTipText("The Research Vessel you are presently working with");

        restUrlTextField.setName("EARS Web server URL");
        restUrlTextField.setToolTipText("The EARS web server available on the vessel network");
        restUrlTextField.setText(Configs.getRestURLString());
        restUrlTextField.setEditable(true);
        group.add(restUrlTextField, StringValidators.URL_MUST_BE_VALID);
        group.add(restUrlTextField, StringValidators.REQUIRE_NON_EMPTY_STRING);

        passwordTextField.setName("password");
        passwordTextField.setToolTipText("The password needed to edit the vessel tree file.");
        userNameTextField.setName("username");
        userNameTextField.setToolTipText("The user account name needed to edit the vessel tree file.");

        countryList.setName("countries");
        countryList.setToolTipText("Choose the country to limit the harbours, organisations and projects to only those of those countries.");

        User currentUser = Configs.getCurrentUser();
        if (currentUser != null) {

            passwordTextField.setText(currentUser.getPassword());
            passwordTextField.setEditable(true);

            userNameTextField.setText(currentUser.getUsername());
            userNameTextField.setEditable(true);
        }
    }

    private void vesselChanged() {
        CurrentVessel currentVessel = Utilities.actionsGlobalContext().lookup(CurrentVessel.class);
        if (platformNameList.getSelectedItem() instanceof VesselBean) {
            VesselBean vessel = (VesselBean) platformNameList.getSelectedItem();
            if (currentVessel == null || !currentVessel.getConcept().equals(vessel)) {
                platformCodeResult.setText(vessel.getCode());

            }
        }
    }

    private void saveVessel() {
        CurrentVessel currentVessel = Utilities.actionsGlobalContext().lookup(CurrentVessel.class);
        if (platformNameList.getSelectedItem() instanceof VesselBean) {
            VesselBean vessel = (VesselBean) platformNameList.getSelectedItem();
            if (currentVessel == null || !currentVessel.getConcept().equals(vessel)) {
                Configs.persistVessel(vessel);
                GlobalActionContextProxy.getInstance().add(CurrentVessel.getInstance(vessel));
            }
        }
    }

    private void saveRestUrl() {
        URL newUrl = null;
        URL actualUrl = null;
        CurrentURL currentUrl = Utilities.actionsGlobalContext().lookup(CurrentURL.class);
        if (currentUrl != null) {
            actualUrl = currentUrl.getConcept();
        }
        try {
            newUrl = new URL(restUrlTextField.getText());
        } catch (MalformedURLException ex) {
            Messaging.report("The URL is not valid and has not been stored.", ex, this.getClass(), true);
        }
        if (newUrl != null && newUrl.getPath() != null && newUrl.getProtocol() != null && newUrl.getHost() != null && !newUrl.equals(actualUrl)) {
            CurrentURL currentUrl2 = CurrentURL.getInstance(newUrl);
            GlobalActionContextProxy.getInstance().add(currentUrl2);
            Configs.persistRestURL(newUrl);
        }
    }

    private void saveUserNameOrPassword() {
        String currentUsername = null;
        String currentPassword = null;
        String username = userNameTextField.getText();
        String password = new String(passwordTextField.getPassword());
        CurrentUser currentUser = Utilities.actionsGlobalContext().lookup(CurrentUser.class);
        if (currentUser != null && currentUser.getConcept() != null) {
            currentUsername = currentUser.getConcept().getUsername();
            currentPassword = currentUser.getConcept().getPassword();
        }
        if (password != null && username != null && !password.isEmpty() && !username.isEmpty() && (!password.equals(currentPassword) || !username.equals(currentUsername))) {
            User user = new User(username, password);
            CurrentUser newCurrentUser = CurrentUser.getInstance(user);
            GlobalActionContextProxy.getInstance().add(newCurrentUser);
            Configs.persistUser(user);
        }
    }

    private void countryListChanged() {
        List<String> countries = countryList.getSelectedValuesList();

        if (countries != null && countries.size() > 0) {
            StringBuilder sb = new StringBuilder("<html> <ul>");

            for (String country : countries) {
                sb.append("<li>");
                sb.append(country);
                sb.append("</li>");
            }
            sb.append("</ul><html>");
            selectedCountriesLabel.setText(sb.toString());
        } else {
            selectedCountriesLabel.setText("No countries selected.");
        }
    }

    private void saveCountry() {
        List<String> countries = countryList.getSelectedValuesList();
        Configs.persistCountries(countries);
    }

    private void refreshMetadata() {
        try {
            Collection<HarbourBean> harbours = Startable.getHarbourMetadataManager().refreshMetadataFile(true);
            GlobalActionContextProxy.getInstance().removeAll(HarbourBean.class);
            GlobalActionContextProxy.getInstance().addAll(harbours);
            Messaging.report("Harbour metadata has been updated", Message.State.INFO, Startable.class, false);

            Collection<OrganisationBean> organisations = Startable.getOrganisationMetadataManager().refreshMetadataFile(true);
            GlobalActionContextProxy.getInstance().removeAll(OrganisationBean.class);
            GlobalActionContextProxy.getInstance().addAll(organisations);
            Messaging.report("Organisation metadata has been updated", Message.State.INFO, Startable.class, false);

            Collection<ProjectBean> projects = Startable.getProjectMetadataManager().refreshMetadataFile(true);
            GlobalActionContextProxy.getInstance().removeAll(ProjectBean.class);
            GlobalActionContextProxy.getInstance().addAll(projects);
            Messaging.report("Project metadata has been updated", Message.State.INFO, Startable.class, false);
        } catch (EarsException ex) {
            Messaging.report(ex.getMessage(), ex, this.getClass(), true);
        }
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> countryList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JTextField platformCodeResult;
    private javax.swing.JComboBox platformNameList;
    private javax.swing.JButton refreshMetadataButton;
    private javax.swing.JTextField restUrlTextField;
    private javax.swing.JLabel selectedCountriesLabel;
    private javax.swing.JTextField userNameTextField;
    private org.netbeans.validation.api.ui.swing.ValidationPanel validationPanel1;
    // End of variables declaration//GEN-END:variables
}
